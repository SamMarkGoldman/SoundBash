/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package audioSampleShuffle;

import audioSampleShuffle.audioTools.AudioAnalysis;
import audioSampleShuffle.audioTools.WavFile;
import audioSampleShuffle.audioTools.fftStats;
import java.io.File;
import java.util.HashSet;
import java.util.Set;
//import java.util.Arrays;
import javax.swing.JFileChooser;

/**
 *
 * @author Sam
 */
public class ShuffleInterface extends javax.swing.JFrame {

    /**
     * Creates new form ShuffleInterface
     */
    public ShuffleInterface() {
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        buttonRun = new java.awt.Button();
        textFieldPoolAudio = new java.awt.TextField();
        buttonSelectPoolAudio = new java.awt.Button();
        textFieldTargetAudio = new java.awt.TextField();
        buttonSelectTargetAudio = new java.awt.Button();
        textFieldOutputAudio = new java.awt.TextField();
        label1 = new java.awt.Label();
        choiceIntervals = new java.awt.Choice();
        labelStatus = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        choiceCurves = new java.awt.Choice();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sound Bash");

        buttonRun.setActionCommand("buttonRun");
        buttonRun.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        buttonRun.setLabel("Bash It Up");
        buttonRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonRunMouseClicked(evt);
            }
        });

        textFieldPoolAudio.setText("Pool Audio Source");

        buttonSelectPoolAudio.setLabel("Select Pool Audio");
        buttonSelectPoolAudio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSelectPoolAudioMouseClicked(evt);
            }
        });

        textFieldTargetAudio.setText("textFieldTargetAudio");

        buttonSelectTargetAudio.setLabel("Select Target Audio");
        buttonSelectTargetAudio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSelectTargetAudioMouseClicked(evt);
            }
        });

        textFieldOutputAudio.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        textFieldOutputAudio.setText("Type Output File Name Here");
        textFieldOutputAudio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textFieldOutputAudioMouseClicked(evt);
            }
        });

        label1.setText("Set Interval");

        labelStatus.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        labelStatus.setText("label2");

        jLabel1.setText("Set Curve");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(buttonRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(textFieldOutputAudio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, textFieldTargetAudio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, textFieldPoolAudio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(buttonSelectTargetAudio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(buttonSelectPoolAudio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .add(24, 24, 24)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(choiceIntervals, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .add(choiceCurves, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(labelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(buttonRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(choiceIntervals, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(label1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(textFieldOutputAudio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(9, 9, 9)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(textFieldPoolAudio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(buttonSelectPoolAudio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(textFieldTargetAudio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(buttonSelectTargetAudio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(choiceCurves, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43)
                .add(labelStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSelectPoolAudioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSelectPoolAudioMouseClicked
        poolAudioName = SelectAudio("Select Pool Audio");
        String[] nameParse = poolAudioName.split("/");
        textFieldPoolAudio.setText(nameParse[nameParse.length - 1]);
    }//GEN-LAST:event_buttonSelectPoolAudioMouseClicked

    private void buttonSelectTargetAudioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSelectTargetAudioMouseClicked
        targetAudioName = SelectAudio("Select Target Audio");
        String[] nameParse = targetAudioName.split("/");
        textFieldTargetAudio.setText(nameParse[nameParse.length - 1]);
    }//GEN-LAST:event_buttonSelectTargetAudioMouseClicked

    private void buttonRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonRunMouseClicked
        Run();
    }//GEN-LAST:event_buttonRunMouseClicked

    private void textFieldOutputAudioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textFieldOutputAudioMouseClicked
        if ("Type Output File Name Here".equals(textFieldOutputAudio.getText())) {
            textFieldOutputAudio.setText("");
        }
            
    }//GEN-LAST:event_textFieldOutputAudioMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShuffleInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShuffleInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShuffleInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShuffleInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShuffleInterface().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button buttonRun;
    private java.awt.Button buttonSelectPoolAudio;
    private java.awt.Button buttonSelectTargetAudio;
    private java.awt.Choice choiceCurves;
    private java.awt.Choice choiceIntervals;
    private javax.swing.JLabel jLabel1;
    private java.awt.Label label1;
    private java.awt.Label labelStatus;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.TextField textFieldOutputAudio;
    private java.awt.TextField textFieldPoolAudio;
    private java.awt.TextField textFieldTargetAudio;
    // End of variables declaration//GEN-END:variables

   
    private void initCustomComponents() {
        
        //  setup the time intervals choice
        choiceIntervals.addItem("23 ms");
        choiceIntervals.addItem("46 ms");
        choiceIntervals.addItem("92 ms");
        choiceIntervals.addItem("185 ms");
        choiceIntervals.addItem("375 ms");
        
        //  setup the curve choice
        File[] curveFiles = ReadWrite.listFiles("Weighting Curves/", ".txt");
        for (int i = 0; i < curveFiles.length; i++) {
            choiceCurves.addItem(curveFiles[i].getName());
        }
        
        //  blank out the status label
        labelStatus.setText("");
        
        //  set the last chooser dir.
        lastChooserDirectoryFile = new File(lastChooserDirectoryFilePath);
        if (lastChooserDirectoryFile.exists()) {
            lastChooserDirectory = ReadWrite.readString(lastChooserDirectoryFile.getAbsolutePath(), 0, (int)lastChooserDirectoryFile.length());
        } else {
            lastChooserDirectory = "";
        }
        
    }
    
    
//    String audioPath = "../Audio/";
    
    //  1024 samples or .023 seconds
    int sampleRate = 44100;
    
    
            
    public AudioAnalysis poolAudio;
    public AudioAnalysis targetAudio;
    private String poolAudioName;
    private String targetAudioName;
    private String outputAudioName;
    final private String lastChooserDirectoryFilePath = ".lastChooserDir";
    private String lastChooserDirectory;
    private File lastChooserDirectoryFile;
    
//    public ShuffleRun() {
//    }
    
    public void Run() {
        
//        float[] testAudio = readRaw(audioPath + "squareWave400Low.raw");
//        float[] test2Audio = readRaw(audioPath + "icatsPromo.raw");
        
//        String poolAudioName = "best of mono.wav";
//        String sourceAudioName = "02 Beautiful Morning.wav";
//        String outputAudioName = "beautiful morning 2048.wav";
        
        int fftLength = (int)Math.pow(2, choiceIntervals.getSelectedIndex() + 10);
        
        outputAudioName = textFieldOutputAudio.getText() + ".wav";
        
        FrequencyBands weightingCurve = new FrequencyBands("Weighting Curves/" + choiceCurves.getSelectedItem());
        
        labelStatus.setText("Preparing: " + GetFileName(targetAudioName));
        AudioAnalysis sourceAudio = new AudioAnalysis(targetAudioName, sampleRate);
        sourceAudio.SetInterval(fftLength);
//        sourceAudio.SetFrequencyBands(FrequencyBands.FLAT_RESPONSE.values);
        sourceAudio.SetFrequencyBands(weightingCurve);
        sourceAudio.LoadWave();
        labelStatus.setText("Calculating FFT for: " + GetFileName(targetAudioName));
        sourceAudio.RunFFT();
        
        
        labelStatus.setText("Preparing: " + GetFileName(poolAudioName));
        AudioAnalysis poolAudio = new AudioAnalysis(poolAudioName, sampleRate);
        poolAudio.SetInterval(fftLength);
//        poolAudio.SetFrequencyBands(FrequencyBands.FLAT_RESPONSE.values);
        poolAudio.SetFrequencyBands(weightingCurve);
        poolAudio.LoadWave();
        labelStatus.setText("Calculating FFT for: " + GetFileName(poolAudioName));
        poolAudio.RunFFT();
        
        //  setup wav
        try
        {
            WavFile outWav = WavFile.newWavFile(new File(outputAudioName), 1, sourceAudio.GetNumSamples(), 16, sampleRate);

        
            //  in samples, not bytes
            int crossFadeTailLength = 200;
            final int FILE_WRITE_CHUNK_SIZE = 1024*1024*4;
            float[] outputRemainder = null;

            float[] outputAudio = null;
            for (int i = 0; i < sourceAudio.fftData.length; i++) {
                float minDiff = Float.MAX_VALUE;
                int minDiffIndex = -1;
                for (int j = 0; j < poolAudio.fftData.length; j++) {
                    float currentDiff = CalcFFTDiff(sourceAudio.fftData[i], poolAudio.fftData[j]);
                    if (currentDiff < minDiff & j != 0 & j!= poolAudio.fftData.length)
                    {
                        minDiff = currentDiff;
                        minDiffIndex = j;
                    }
                }

                //  pulls the audio sample needed, included crossfade tails, which have been adjusted to put them in bytes.
                float[] amplitudeAdjustedSelection = poolAudio.GetAudioClip(
                            poolAudio.fftData[minDiffIndex].sampleBounds[0] - crossFadeTailLength*2, 
                            poolAudio.fftData[minDiffIndex].sampleBounds[1] + crossFadeTailLength*2
                        ); 

                //  adjusts the amplitude of the new selection to match the original selection.
                float ampAdjFactor = sourceAudio.fftData[i].avgAmplitude / poolAudio.fftData[minDiffIndex].avgAmplitude;
                amplitudeAdjustedSelection = amplify(amplitudeAdjustedSelection, ampAdjFactor);


                //  gets called only after the write buffer has been written to a wav file, and we need to reset the outputAudio array.
                if (outputRemainder != null & outputAudio == null) {
                    outputAudio = outputRemainder;
                }

                outputAudio = crossfade(outputAudio, amplitudeAdjustedSelection, crossFadeTailLength * 2);

                if (outputAudio.length >= FILE_WRITE_CHUNK_SIZE) {
                    outputRemainder = new float[FILE_WRITE_CHUNK_SIZE / 4];
                    System.arraycopy(outputAudio, outputAudio.length - outputRemainder.length, outputRemainder, 0, outputRemainder.length);

                    double[] writeArray = new double[outputAudio.length - outputRemainder.length];
                    for (int j = 0; j < writeArray.length; j++) {
                        writeArray[j] = (double)(outputAudio[j] / 0x8000);
                    }
                    
                    outWav.writeFrames(writeArray, writeArray.length);


                    outputAudio = null;
                }

//                System.out.println(i + "/" + sourceAudio.fftData.length);            
                labelStatus.setText("Building new file:  " + i + "/" + sourceAudio.fftData.length);

            }
            
            //  write everything else to the wav file.
            double[] writeArray = new double[outputAudio.length];
            for (int j = 0; j < writeArray.length; j++) {
                writeArray[j] = (double)(outputAudio[j] / 0x8000);
            }
            outWav.writeFrames(writeArray, writeArray.length);
            outWav.close();

        }
        catch (Exception e)
        {
            System.err.println(e);
        }
        
        poolAudio.Close();
        sourceAudio.Close();
        
        labelStatus.setText("FIN");

//        writeRaw(audioPath + outputAudioName, outputAudio);
        
    }
    
    public String SelectAudio(String label) {
        JFileChooser chooser = new JFileChooser();
        chooser.setApproveButtonText("POP! POP!");
        chooser.setCurrentDirectory(new File(lastChooserDirectory));
        
        int rVal = chooser.showDialog(null, label);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            lastChooserDirectory = chooser.getSelectedFile().getAbsolutePath();
            ReadWrite.writeString(lastChooserDirectoryFilePath, lastChooserDirectory, false);
            return chooser.getSelectedFile().getAbsolutePath();
            
//            audio = new AudioAnalysis(audioPath, sampleRate)
        }
//        else if (rVal == JFileChooser.CANCEL_OPTION) {
//            return null;
//        }
        return null;
    }
    
    private float CalcFFTDiff(fftStats a, fftStats b) {
        float diff = 0;
        for (int i = 0; i < a.values.length; i++) {
            diff += Math.abs(a.values[i] - b.values[i]);
        }
        return diff;
    }
   

    
    private void writeRaw (String fileName, float[] floatData) {
        byte[] byteData = new byte[floatData.length * 2];
        
        //  converts from int to byte
        for (int i = 0; i < floatData.length; i++) {
            byteData[2*i] = (byte)((int)floatData[i] & 0xFF);
            byteData[2*i + 1] = (byte)((int)floatData[i] >> 8 & 0xFF);
        }

        //  writes the byte array to a file.
        BytesStreamsAndFiles.write(byteData, fileName);
    }        
    
    
    private float[] amplify(float[] inputAudio, float quotient) {
        for (int i = 0; i < inputAudio.length; i++) {
            inputAudio[i] *= quotient;
        }
        return inputAudio;
    }
    
    
    private float[] crossfade(float[] firstAudio, float[] secondAudio, int numCrossSamples) {
        if (firstAudio == null)
            return secondAudio;
        if (secondAudio == null)
            return firstAudio;
        
        int resultingLength = firstAudio.length + secondAudio.length - numCrossSamples;
        int startOfFadePos = firstAudio.length - numCrossSamples;
        
        float[] resultingArray = new float[resultingLength];
        
        //  copy every before the crossfade begins.
        System.arraycopy(firstAudio, 0, resultingArray, 0, startOfFadePos);
        
        //  preform the crossfade
        for (int i = 0; i < numCrossSamples; i++) {
            resultingArray[startOfFadePos + i] = (float)(
                    firstAudio[startOfFadePos + i] * Math.pow((0.5 + 0.5 * Math.cos(Math.PI * (float)i/numCrossSamples)), 0.5) + 
                    secondAudio[i] * Math.pow((0.5 - 0.5 * Math.cos(Math.PI * (float)i/numCrossSamples)), 0.5)
                );
        }
        
        //  copy everything after the crossfade
        System.arraycopy(secondAudio, numCrossSamples, resultingArray, firstAudio.length, secondAudio.length - numCrossSamples);
        
        return resultingArray;
    }
    
    private String GetFileName(String path) {
        return path.split("/")[path.split("/").length - 1];
    }
}
